AWSTemplateFormatVersion: 2010-09-09

Description: App Stack

Parameters:

  App:
    Type: String

  DockerTag:
    Type: String

  Env:
    Type: String

Resources:

  EfsVolume:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole

  IAMRoleAllowLogging:
    Type: AWS::IAM::Policy
    Properties:
      Roles:
      - !Ref IAMRole
      PolicyName: AllowLogging
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Action:
          - logs:CreateLogStream
          - logs:DescribeLogGroups
          - logs:DescribeLogStreams
          - logs:PutLogEvents
          Resource:
          - !GetAtt LogGroup.Arn

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref IAMRole

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /apps/${App}/${Stage}

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancer
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ecs-cluster-${Env}-ClusterName
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: !Sub ${App}-container
        ContainerPort: 5000
        TargetGroupArn: !Ref LoadBalancerAppTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
          - !Ref AppSecurityGroup
          Subnets:
          - !ImportValue vpc-PrivateSubnet-A
          - !ImportValue vpc-PrivateSubnet-B
          - !ImportValue vpc-PrivateSubnet-C
      TaskDefinition: !Ref EcsServiceTaskDefinition

  EcsServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: !Sub ${App}-container
        Environment:
        - Name: DATASTORE_FILE_PATH
          Value: /mnt/datastore/data.json
        Essential: true
        Image: !Ref DockerTag
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref LogGroup
            awslogs-stream-prefix: !Sub ${App}-container
            awslogs-region: !Ref AWS::Region
        MountPoints:
        - SourceVolume: DataStoreEfs
          ContainerPath: /mnt/datastore
        PortMappings:
        - ContainerPort: 5000
          HostPort: 5000
          Protocol: tcp
      Volumes:
      - Name: DataStoreEfs
        EFSVolumeConfiguration:
          FilesystemId: !Ref EfsVolume
      Cpu: '256'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ecs-cluster-${Env}-ExecutionRoleArn
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn: !Ref IAMRole

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:DeleteAlarms
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            Resource: '*'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinSize
      MaxCapacity: !Ref MaxSize
      ResourceId: !Join
      - '/'
      - - service
        - Fn::ImportValue: !Sub ecs-cluster-${Env}-ClusterName
        - !GetAtt EcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  ServiceScalingPolicyCPU:
    Condition: DynamicScalingEnabled
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-cpu70
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue vpc-VpcId
      GroupDescription: Open up HTTP access from load balancer
      SecurityGroupIngress:
      - SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue vpc-VpcId
      GroupDescription: load balancer

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets:
      - !ImportValue vpc-PublicSubnet-A
      - !ImportValue vpc-PublicSubnet-B
      - !ImportValue vpc-PublicSubnet-C

  LoadBalancerAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /healthz
      HealthCheckPort: 5000
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 4
      Port: 5000
      Protocol: HTTP
      Matcher:
        HttpCode: 404
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: 60
      TargetType: ip
      VpcId: !ImportValue vpc-VpcId

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref LoadBalancerAppTargetGroup

  DNSRecordA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: MyHostedZoneId
      Name: birthday.mydomain
      Type: A
      AliasTarget:
        DNSName: !Sub dualstack.${LoadBalancer.DNSName}
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
