AWSTemplateFormatVersion: 2010-09-09

Description: App Stack

Parameters:

  App:
    Type: String

  DockerTag:
    Type: String

Resources:

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
            - ecs.amazonaws.com
            - ecs-tasks.amazonaws.com
          Action:
          - sts:AssumeRole

  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
      - !Ref IAMRole

  EcsService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerHTTPS
    Properties:
      Cluster:
        Fn::ImportValue: !Sub ecs-cluster-${Stage}-ClusterName
      DeploymentConfiguration:
        DeploymentCircuitBreaker:
          Enable: true
          Rollback: true
      DeploymentController:
        Type: ECS
      DesiredCount: 2
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      LoadBalancers:
      - ContainerName: !Sub ${App}-container
        ContainerPort: 4000
        TargetGroupArn: !Ref LoadBalancerAppTargetGroup
      NetworkConfiguration:
        AwsvpcConfiguration:
          SecurityGroups:
          - !Ref AppSecurityGroup
          Subnets:
          - !ImportValue VPC-PrivateASubnet
          - !ImportValue VPC-PrivateBSubnet
          - !ImportValue VPC-PrivateCSubnet
      TaskDefinition: !Ref EcsServiceTaskDefinition

  EcsServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
      - Name: !Sub ${App}-container
        Environment:
        - Name: APP
          Value: !Ref App
        - Name: AWS_REGION
          Value: !Sub ${AWS::Region}
        - Name: RELEASE
          Value: !Ref Release
        - Name: STAGE
          Value: !Ref Stage
        - Name: TIMESTAMP
          Value: !Ref TimeStamp
        Essential: true
        Image: !Ref DockerTag
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref DockerLogGroup
            awslogs-stream-prefix: !Sub ${App}-container
            awslogs-region: !Ref AWS::Region
        PortMappings:
        - ContainerPort: 4000
          HostPort: 4000
          Protocol: tcp
      Cpu: '256'
      ExecutionRoleArn:
        Fn::ImportValue: !Sub ecs-cluster-${Stage}-ExecutionRoleArn
      Memory: '512'
      NetworkMode: awsvpc
      RequiresCompatibilities:
      - FARGATE
      TaskRoleArn: !Ref IAMRole

  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ecs-tasks.amazonaws.com
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ecs:DescribeServices
            - ecs:UpdateService
            - cloudwatch:DeleteAlarms
            - cloudwatch:DescribeAlarms
            - cloudwatch:PutMetricAlarm
            Resource: '*'

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: !Ref MinSize
      MaxCapacity: !Ref MaxSize
      ResourceId: !Join
      - '/'
      - - service
        - Fn::ImportValue: !Sub ecs-cluster-${Stage}-ClusterName
        - !GetAtt EcsService.Name
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs
      RoleARN: !GetAtt AutoScalingRole.Arn

  ServiceScalingPolicyCPU:
    Condition: DynamicScalingEnabled
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-target-tracking-cpu70
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref AutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        TargetValue: 70.0
        ScaleInCooldown: 180
        ScaleOutCooldown: 60
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization

  AppSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPC-VPCID
      GroupDescription: Open up HTTP access from load balancer
      SecurityGroupIngress:
      - SourceSecurityGroupId: !GetAtt LoadBalancerSecurityGroup.GroupId
        IpProtocol: tcp
        FromPort: 5000
        ToPort: 5000

  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !ImportValue VPC-VPCID
      GroupDescription: load balancer

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
      - !GetAtt LoadBalancerSecurityGroup.GroupId
      Subnets:
      - subnet-0a41157c
      - subnet-23gdsg43
      - subnet-0drfgh35

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Port: 80
      Protocol: HTTP
      LoadBalancerArn: !Ref LoadBalancer
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref LoadBalancerAppTargetGroup
